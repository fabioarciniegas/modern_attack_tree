#divColumnsWrapper
{
    width: 100%;
    height: 80px;
    border: 0px solid Green;
    padding: 3px;
    margin: 0px 0px 0px 0px;
    font-family: Arial;
    font-size: 12px;
}
#divLibraryView
{
    width: 32%;
    height: 100%;
    background-color: #E0E0E0;
    margin-right: 5px;
    overflow-y: auto;
    transition: 0.5s;
    float: left;
}

#divCodeView
{
    width: 33%;
    height: 100%;
    background-color: #E0E0E0;
    margin-right: 5px;
    transition: 0.5s;
    overflow-y: auto;
    float: left;
}

#divTreeView
{
    width: 33%;
    /* fine-tune to actual height */
    background-color: #FFFFFF;
    height: 100%;
    margin-right: 5px;
    transition: 0.5s;
    overflow-y: auto;
    float: left;
}

#tree-container
{
    background-color: #FFFFFF;
}

/*
    *   This is the CSS for one Customer record, in our Master view
    *
    *   Each Customer record will have one overall <div> element, with one sub-<div> for each Customer field
    *   that we want to display.
    *
    *   For example, the Customer City values will all be added to the DOM with a CSS class of "cssCompanyCity",
    *   which sets their position in the "Customer" <div> to (23px, 40px)
    */
.cssOneCompanyRecord {
    height: 47px;
    width: 98%;
    position: relative;         /* Very important, for appending child <div>s with absolute positioning later */
    border-bottom: 1px solid white;
}
.cssOneCompanyRecord:hover
{
    background-color: yellow;
    cursor: pointer;
}
.cssCompanySelectedRecord {
    /*  If this Company record has been selected, we'll display a Red vertical bar next to it */
    border-left: 2px solid Red;
    background-color: white;
}
.cssCompanyName
{
    position:absolute;
    top: 5px;
    left: 40px;
}
.cssCompanyCity
{
    position:absolute;
    top: 23px;
    left: 40px;
    color: #505050;
    font-size: 0.9em;
}
.cssCustomerID
{
    position:absolute;
    top: 31px;
    right: 5px;
    font-size: 0.7em;
    color: blue;
}
.cssCustomerIcon
{
    position:absolute;
    top: 12px;
    left: 7px;
    width: 24px;
    height: 24px;
}

/*
    *   This is the CSS for one "Order" record, in our Detail view
    *
    *   This one's a little more complicated, as, for each "Order", we'll have an Order Header, followed by a
    *   collection of "Product" <div>s in that order.
    *
    *   But, the theory is just the same.  Each "Product" values gets added to the DOM with a particular CSS class
    *   to allow us to set their position in the "Product" <div>.
    */

.cssOneOrderRecord
{
    width: 90%;
    position: relative;         /* Very important, for appending child <div>s with absolute positioning later */
    padding: 5px;
    border-bottom: 1px solid white;
    background-color: white;
    border: 1px solid #404040;
    margin: 15px 20px 15px 20px;
    overflow: no-display;
}
.cssOneOrderHeader {
    height: 40px;
    background-color: #E0E0E0;
    width: 100%;
    position: relative;
    margin: 0px 0px 4px 0px;

    background-image: url(icnOrder.png);
    background-position: 10px 5px;
    background-repeat: no-repeat;
}
.cssOrderID
{
    position:absolute;
    left: 75px;
    top: 10px;
    font-weight: bold;
}
.cssOrderDate
{
    position:absolute;
    left: 300px;
    top: 10px;
}
.cssOneProductRecord
{
    width: 100%;
    height: 25px;
    position: relative;
    overflow: hidden;
}
.cssOneProductQty
{
    position:absolute;
    left: 30px;
    top: 5px;
}
.cssOneProductName
{
    position:absolute;
    left: 100px;
    top: 5px;
}
.cssOneProductPrice
{
    position:absolute;
    left: 300px;
    top: 7px;
}
.cssOneProductSubtotal {
    position:absolute;
    left: 420px;
    top: 7px;
    overflow: hidden;
    height: 20px;
}
.cssOneOrderTotal {
    width: 100%;
    height: 32px;
    position: relative;
    background-color: #e0e0e0;
    margin: 10px 0px 4px 0px;
    font-weight: bold;
    border-top: dashed 1px black;
    overflow: hidden;
}

.cssProductEven {
    background-color: white;
}
.cssProductOdd {
    background-color: #F0F8F8;
}


